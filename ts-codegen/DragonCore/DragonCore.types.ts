/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface InstantiateMsg {
  denom: string;
  gene_science_contract: string;
  minters: string[];
  name: string;
  symbol: string;
}
export type ExecuteMsg = {
  transfer_nft: {
    recipient: string;
    token_id: string;
  };
} | {
  send_nft: {
    contract: string;
    msg: Binary;
    token_id: string;
  };
} | {
  approve: {
    expires?: Expiration | null;
    spender: string;
    token_id: string;
  };
} | {
  revoke: {
    spender: string;
    token_id: string;
  };
} | {
  approve_all: {
    expires?: Expiration | null;
    operator: string;
  };
} | {
  revoke_all: {
    operator: string;
  };
} | {
  mint: {
    extension: Metadata;
    owner: string;
    token_id: string;
    token_uri?: string | null;
  };
} | {
  burn: {
    token_id: string;
  };
} | {
  extension: {
    msg: ExecuteDragonCoreMsg;
  };
} | {
  update_ownership: Action;
};
export type Binary = string;
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {};
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type ExecuteDragonCoreMsg = {
  set_minter_msg: {
    is_setter: boolean;
    minters: string[];
  };
} | {
  mate_with_auto_msg: {
    matron_id: string;
    sire_id: string;
  };
} | {
  give_birth_msg: {
    matron_id: string;
  };
} | {
  create_gen0_msg: {
    genes: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
    owner: string;
  };
} | {
  approve_siring_msg: {
    operator: string;
    sire_id: string;
  };
} | {
  set_gene_science_contract_msg: {
    gene_science_contract: string;
  };
} | {
  set_denom_msg: {
    denom: string;
  };
};
export type Action = {
  transfer_ownership: {
    expiry?: Expiration | null;
    new_owner: string;
  };
} | "accept_ownership" | "renounce_ownership";
export interface Metadata {
  birth_time: number;
  cooldown_end: number;
  cooldown_index: number;
  generation: number;
  genes: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
  mating_with_id?: string | null;
  matron_id?: string | null;
  sire_id?: string | null;
  tx_count: number;
}
export type QueryMsg = {
  minters: {};
} | {
  can_mate_with: {
    matron_id: string;
    sire_id: string;
  };
} | {
  is_ready_to_mate: {
    token_id: string;
  };
} | {
  is_pregnant: {
    token_id: string;
  };
} | {
  owner_of: {
    include_expired?: boolean | null;
    token_id: string;
  };
} | {
  approval: {
    include_expired?: boolean | null;
    spender: string;
    token_id: string;
  };
} | {
  approvals: {
    include_expired?: boolean | null;
    token_id: string;
  };
} | {
  all_operators: {
    include_expired?: boolean | null;
    limit?: number | null;
    owner: string;
    start_after?: string | null;
  };
} | {
  num_tokens: {};
} | {
  contract_info: {};
} | {
  nft_info: {
    token_id: string;
  };
} | {
  all_nft_info: {
    include_expired?: boolean | null;
    token_id: string;
  };
} | {
  tokens: {
    limit?: number | null;
    owner: string;
    start_after?: string | null;
  };
} | {
  all_tokens: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  minter: {};
};
export interface AllNftInfoResponseForEmpty {
  access: OwnerOfResponse;
  info: NftInfoResponseForEmpty;
}
export interface OwnerOfResponse {
  approvals: Approval[];
  owner: string;
}
export interface Approval {
  expires: Expiration;
  spender: string;
}
export interface NftInfoResponseForEmpty {
  extension: Empty;
  token_uri?: string | null;
}
export interface Empty {
  [k: string]: unknown;
}
export interface OperatorResponse {
  approval: Approval;
}
export interface TokensResponse {
  tokens: string[];
}
export interface ApprovalResponse {
  approval: Approval;
}
export interface ApprovalsResponse {
  approvals: Approval[];
}
export type Boolean = boolean;
export interface ContractInfoResponse {
  name: string;
  symbol: string;
}
export interface MinterResponse {
  minter?: string | null;
}
export type Addr = string;
export interface MintersResponse {
  minters: Addr[];
}
export interface NumTokensResponse {
  count: number;
}