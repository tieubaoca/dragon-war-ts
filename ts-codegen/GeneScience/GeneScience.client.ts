/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {
  InstantiateMsg,
  ExecuteMsg,
  Action,
  Expiration,
  Timestamp,
  Uint64,
  QueryMsg,
  ArraySize_32OfUint8,
  Uint16,
} from "./GeneScience.types";
export interface GeneScienceReadOnlyInterface {
  contractAddress: string;
  mixGenes: ({
    matronGenes,
    sireGenes,
  }: {
    matronGenes: number[];
    sireGenes: number[];
  }) => Promise<ArraySize_32OfUint8>;
  processCooldown: ({
    generation,
    target,
  }: {
    generation: number;
    target: number;
  }) => Promise<Uint16>;
}
export class GeneScienceQueryClient implements GeneScienceReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.mixGenes = this.mixGenes.bind(this);
    this.processCooldown = this.processCooldown.bind(this);
  }

  mixGenes = async ({
    matronGenes,
    sireGenes,
  }: {
    matronGenes: number[];
    sireGenes: number[];
  }): Promise<ArraySize_32OfUint8> => {
    return this.client.queryContractSmart(this.contractAddress, {
      mix_genes: {
        matron_genes: matronGenes,
        sire_genes: sireGenes,
      },
    });
  };
  processCooldown = async ({
    generation,
    target,
  }: {
    generation: number;
    target: number;
  }): Promise<Uint16> => {
    return this.client.queryContractSmart(this.contractAddress, {
      process_cooldown: {
        generation,
        target,
      },
    });
  };
}
export interface GeneScienceInterface extends GeneScienceReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateSeed: (
    {
      seed,
    }: {
      seed: number[];
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  setMutability: (
    {
      mutability,
    }: {
      mutability: number;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  setBoostedMutability: (
    {
      boostedMutability,
    }: {
      boostedMutability: number;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  startMatingSeason: (
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  endMatingSeason: (
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  updateOwnership: (
    action: Action,
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class GeneScienceClient
  extends GeneScienceQueryClient
  implements GeneScienceInterface
{
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateSeed = this.updateSeed.bind(this);
    this.setMutability = this.setMutability.bind(this);
    this.setBoostedMutability = this.setBoostedMutability.bind(this);
    this.startMatingSeason = this.startMatingSeason.bind(this);
    this.endMatingSeason = this.endMatingSeason.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }

  updateSeed = async (
    {
      seed,
    }: {
      seed: number[];
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_seed: {
          seed,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  setMutability = async (
    {
      mutability,
    }: {
      mutability: number;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_mutability: {
          mutability,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  setBoostedMutability = async (
    {
      boostedMutability,
    }: {
      boostedMutability: number;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_boosted_mutability: {
          boosted_mutability: boostedMutability,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  startMatingSeason = async (
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        start_mating_season: {},
      },
      fee,
      memo,
      _funds
    );
  };
  endMatingSeason = async (
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        end_mating_season: {},
      },
      fee,
      memo,
      _funds
    );
  };
  updateOwnership = async (
    action: Action,
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_ownership: action,
      },
      fee,
      memo,
      _funds
    );
  };
}
