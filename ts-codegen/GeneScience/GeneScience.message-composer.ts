/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import {
  InstantiateMsg,
  ExecuteMsg,
  Action,
  Expiration,
  Timestamp,
  Uint64,
  QueryMsg,
  ArraySize_32OfUint8,
  Uint16,
} from "./GeneScience.types";
export interface GeneScienceMsg {
  contractAddress: string;
  sender: string;
  updateSeed: (
    {
      seed,
    }: {
      seed: number[];
    },
    _funds?: Coin[]
  ) => MsgExecuteContractEncodeObject;
  setMutability: (
    {
      mutability,
    }: {
      mutability: number;
    },
    _funds?: Coin[]
  ) => MsgExecuteContractEncodeObject;
  setBoostedMutability: (
    {
      boostedMutability,
    }: {
      boostedMutability: number;
    },
    _funds?: Coin[]
  ) => MsgExecuteContractEncodeObject;
  startMatingSeason: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  endMatingSeason: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateOwnership: (
    action: Action,
    _funds?: Coin[]
  ) => MsgExecuteContractEncodeObject;
}
export class GeneScienceMsgComposer implements GeneScienceMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateSeed = this.updateSeed.bind(this);
    this.setMutability = this.setMutability.bind(this);
    this.setBoostedMutability = this.setBoostedMutability.bind(this);
    this.startMatingSeason = this.startMatingSeason.bind(this);
    this.endMatingSeason = this.endMatingSeason.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }

  updateSeed = (
    {
      seed,
    }: {
      seed: number[];
    },
    _funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            update_seed: {
              seed,
            },
          })
        ),
        funds: _funds,
      }),
    };
  };
  setMutability = (
    {
      mutability,
    }: {
      mutability: number;
    },
    _funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            set_mutability: {
              mutability,
            },
          })
        ),
        funds: _funds,
      }),
    };
  };
  setBoostedMutability = (
    {
      boostedMutability,
    }: {
      boostedMutability: number;
    },
    _funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            set_boosted_mutability: {
              boosted_mutability: boostedMutability,
            },
          })
        ),
        funds: _funds,
      }),
    };
  };
  startMatingSeason = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            start_mating_season: {},
          })
        ),
        funds: _funds,
      }),
    };
  };
  endMatingSeason = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            end_mating_season: {},
          })
        ),
        funds: _funds,
      }),
    };
  };
  updateOwnership = (
    action: Action,
    _funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            update_ownership: action,
          })
        ),
        funds: _funds,
      }),
    };
  };
}
