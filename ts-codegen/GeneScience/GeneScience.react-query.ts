/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  UseQueryOptions,
  useQuery,
  useMutation,
  UseMutationOptions,
} from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import {
  InstantiateMsg,
  ExecuteMsg,
  Action,
  Expiration,
  Timestamp,
  Uint64,
  QueryMsg,
  ArraySize_32OfUint8,
  Uint16,
} from "./GeneScience.types";
import {
  GeneScienceQueryClient,
  GeneScienceClient,
} from "./GeneScience.client";
export const geneScienceQueryKeys = {
  contract: [
    {
      contract: "geneScience",
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [
      { ...geneScienceQueryKeys.contract[0], address: contractAddress },
    ] as const,
  mixGenes: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...geneScienceQueryKeys.address(contractAddress)[0],
        method: "mix_genes",
        args,
      },
    ] as const,
  processCooldown: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...geneScienceQueryKeys.address(contractAddress)[0],
        method: "process_cooldown",
        args,
      },
    ] as const,
};
export const geneScienceQueries = {
  mixGenes: <TData = ArraySize32OfUint8>({
    client,
    args,
    options,
  }: GeneScienceMixGenesQuery<TData>): UseQueryOptions<
    ArraySize32OfUint8,
    Error,
    TData
  > => ({
    queryKey: geneScienceQueryKeys.mixGenes(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.mixGenes({
            matronGenes: args.matronGenes,
            sireGenes: args.sireGenes,
          })
        : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  processCooldown: <TData = Uint16>({
    client,
    args,
    options,
  }: GeneScienceProcessCooldownQuery<TData>): UseQueryOptions<
    Uint16,
    Error,
    TData
  > => ({
    queryKey: geneScienceQueryKeys.processCooldown(
      client?.contractAddress,
      args
    ),
    queryFn: () =>
      client
        ? client.processCooldown({
            generation: args.generation,
            target: args.target,
          })
        : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
};
export interface GeneScienceReactQuery<TResponse, TData = TResponse> {
  client: GeneScienceQueryClient | undefined;
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined;
  };
}
export interface GeneScienceProcessCooldownQuery<TData>
  extends GeneScienceReactQuery<Uint16, TData> {
  args: {
    generation: number;
    target: number;
  };
}
export function useGeneScienceProcessCooldownQuery<TData = Uint16>({
  client,
  args,
  options,
}: GeneScienceProcessCooldownQuery<TData>) {
  return useQuery<Uint16, Error, TData>(
    geneScienceQueryKeys.processCooldown(client?.contractAddress, args),
    () =>
      client
        ? client.processCooldown({
            generation: args.generation,
            target: args.target,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface GeneScienceMixGenesQuery<TData>
  extends GeneScienceReactQuery<ArraySize32OfUint8, TData> {
  args: {
    matronGenes: number[];
    sireGenes: number[];
  };
}
export function useGeneScienceMixGenesQuery<TData = ArraySize32OfUint8>({
  client,
  args,
  options,
}: GeneScienceMixGenesQuery<TData>) {
  return useQuery<ArraySize32OfUint8, Error, TData>(
    geneScienceQueryKeys.mixGenes(client?.contractAddress, args),
    () =>
      client
        ? client.mixGenes({
            matronGenes: args.matronGenes,
            sireGenes: args.sireGenes,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface GeneScienceUpdateOwnershipMutation {
  client: GeneScienceClient;
  msg: Action;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useGeneScienceUpdateOwnershipMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      GeneScienceUpdateOwnershipMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, GeneScienceUpdateOwnershipMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateOwnership(msg, fee, memo, funds),
    options
  );
}
export interface GeneScienceEndMatingSeasonMutation {
  client: GeneScienceClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useGeneScienceEndMatingSeasonMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      GeneScienceEndMatingSeasonMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, GeneScienceEndMatingSeasonMutation>(
    ({ client, args: { fee, memo, funds } = {} }) =>
      client.endMatingSeason(fee, memo, funds),
    options
  );
}
export interface GeneScienceStartMatingSeasonMutation {
  client: GeneScienceClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useGeneScienceStartMatingSeasonMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      GeneScienceStartMatingSeasonMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    GeneScienceStartMatingSeasonMutation
  >(
    ({ client, args: { fee, memo, funds } = {} }) =>
      client.startMatingSeason(fee, memo, funds),
    options
  );
}
export interface GeneScienceSetBoostedMutabilityMutation {
  client: GeneScienceClient;
  msg: {
    boostedMutability: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useGeneScienceSetBoostedMutabilityMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      GeneScienceSetBoostedMutabilityMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    GeneScienceSetBoostedMutabilityMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.setBoostedMutability(msg, fee, memo, funds),
    options
  );
}
export interface GeneScienceSetMutabilityMutation {
  client: GeneScienceClient;
  msg: {
    mutability: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useGeneScienceSetMutabilityMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, GeneScienceSetMutabilityMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, GeneScienceSetMutabilityMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.setMutability(msg, fee, memo, funds),
    options
  );
}
export interface GeneScienceUpdateSeedMutation {
  client: GeneScienceClient;
  msg: {
    seed: number[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useGeneScienceUpdateSeedMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, GeneScienceUpdateSeedMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, GeneScienceUpdateSeedMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateSeed(msg, fee, memo, funds),
    options
  );
}
